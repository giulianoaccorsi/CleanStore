//
//  CreateOrderPresenter.swift
//  CleanStore
//
//  Created by Giuliano Accorsi on 31/05/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CreateOrderPresenterProtocol {
    func presentExpirationDate(response: CreateOrder.FormatExpirationDate.Response)
    func presentTableView(response: CreateOrder.TableView.Response)
    func presentPickerView(reponse: CreateOrder.PickerView.Response)
    func presentCreatedOrder(response: CreateOrder.SaveOrder.Response)
    func presentEditedOrder(reponse: CreateOrder.EditOrder.Response)
    func presentUpdateOrder(reponse: CreateOrder.EditOrder.Response)
    
}

class CreateOrderPresenter: CreateOrderPresenterProtocol {
    
    weak var viewController: CreateOrderViewControllerProtocol?
    
    let dateFormatter: DateFormatter = {
        let dateFormatter = DateFormatter()
        dateFormatter.dateStyle = .short
        dateFormatter.timeStyle = .none
        return dateFormatter
    }()
    
    func presentExpirationDate(response: CreateOrder.FormatExpirationDate.Response) {
        let date = dateFormatter.string(from: response.date)
        let viewModel = CreateOrder.FormatExpirationDate.ViewModel(date: date)
        viewController?.displayExpirationDate(viewModel: viewModel)
    }
    
    func presentTableView(response: CreateOrder.TableView.Response) {
        let viewModel = CreateOrder.TableView.ViewModel(formSection: response.formSection)
        viewController?.displayTableView(viewModel: viewModel)
    }
    
    func presentPickerView(reponse: CreateOrder.PickerView.Response) {
        let viewModel = CreateOrder.PickerView.ViewModel(shippingMethods: reponse.shippingMethods)
        viewController?.displayPickerView(viewModel: viewModel)
    }
    
    func presentCreatedOrder(response: CreateOrder.SaveOrder.Response) {
        let viewModel = CreateOrder.SaveOrder.ViewModel(order: response.order)
        viewController?.displayCreatedOrder(viewModel: viewModel)
    }
    
    func presentEditedOrder(reponse: CreateOrder.EditOrder.Response) {
        let viewModel = CreateOrder.EditOrder.ViewModel(order: reponse.order)
        viewController?.displayOrderToEdit(viewModel: viewModel)
    }
    func presentUpdateOrder(reponse: CreateOrder.EditOrder.Response) {
        let viewModel = CreateOrder.EditOrder.ViewModel(order: reponse.order)
        viewController?.displayUpdateOrder(viewModel: viewModel)
    }
    
    
}
